/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }  
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 **/
const express = require("express");
const bodyParser = require("body-parser");
const app = express();
const fs = require("fs");
const cors = require("cors");
const { Server } = require("http");

app.use(cors());
let todos;

fs.readFile("todos.json", { encoding: "utf-8" }, (err, data) => {
  if (err) throw new Error(err);
  todos = JSON.parse(data);
});

function writeTodos(todos) {
  const todosJSON = JSON.stringify(todos, null, 2);
  fs.writeFile("todos.json", todosJSON, (err) => {
    if (err) throw new Error(err);
    console.log("Todos successfully written to file.");
  });
}

app.use(bodyParser.json());

let id = 0;

function createTODO(title, completed, description) {
  let todo = {
    id: id,
    title: title,
    completed: completed,
    description: description,
  };
  todos.push(todo);
  writeTodos(todos);
}

app.post("/todos", (req, res) => {
  let { title, completed, description } = req.body;
  id += 1;
  createTODO(title, completed, description);
  res.status(201).send({ id: id });
});

app.get("/todos", (req, res) => {
  res.json(todos);
});

app.get(`/todos/:id`, (req, res) => {
  const todoId = req.params.id;
  if (!isNaN(todoId)) {
    const todo = todos.find((todo) => todo.id === parseInt(todoId));
    if (todo) {
      res.json(todo);
    } else {
      res.status(494).send("404 Not Found");
    }
  } else {
    res.status(404).send("404 Not Found");
  }
});

app.put("/todos/:id", (req, res) => {
  const { title, completed } = req.body;
  const todoId = req.params.id;
  if (!isNaN(todoId)) {
    const foundTodo = todos.find((todo) => todo.id === parseInt(todoId));
    if (foundTodo) {
      foundTodo.title = title;
      foundTodo.completed = completed;
      writeTodos(todos);
      res.send();
    } else {
      res.status(404).send("404 Not Found");
    }
  } else {
    res.status(404).send("404 Not Found");
  }
});

app.delete("/todos/:id", (req, res) => {
  const todoId = req.params.id;
  if (!isNaN(todoId)) {
    const foundTodoIndex = todos.findIndex(
      (todo) => todo.id === parseInt(todoId)
    );
    if (foundTodoIndex !== -1) {
      todos.splice(foundTodoIndex, 1);
      writeTodos(todos);
      res.send();
    } else {
      res.status(404).send("404 Not Found");
    }
  } else {
    res.status(404).send("404 Not Found");
  }
});

app.use((req, res) => {
  res.status(404).send("404 Not Found");
});

app.listen(3000);

module.exports = app;
